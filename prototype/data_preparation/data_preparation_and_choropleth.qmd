---
title: "Data Preparation & ChoroPleth"
author: "Firdaus"
date: "02/22/24"
date-modified: "last-modified"
execute:
  eval: true
  echo: true 
  warning: false
date-format: long
---

# 1.Lauching R Packages and Data Import

```{r}
pacman::p_load(ggrepel, patchwork, 
               ggthemes, hrbrthemes,
               ggdist, ggridges,
               colorspace,ggstatsplot, 
               tidyverse) 
```

import big mac data

```{r}
big_mac <- read_csv("data/big_mac.csv")
```

```{r}
head(big_mac)
```

# 2. Data Wrangling and Merging

convert date to year

```{r}
big_mac$date <- dmy(big_mac$date)
big_mac$year <- year(big_mac$date)

big_mac
```

check number of records per year

```{r}

entries_per_year_country <- big_mac %>%
  group_by(year, name) %>%
  summarize(count = n())
```

As most countries only contains 1 record each year, the earliest record for each year will be kept for easier manipulation

```{r}
first_records <- big_mac %>%
  group_by(year, name) %>%
  slice(1)
```

rename some variables

```{r}
big_mac_new <- first_records %>%
  select(
    country = name, 
    currency_code, 
    local_price, 
    usd_price = dollar_ex, 
    year
  )
```

some of country name is not consistent, rename

```{r}
big_mac_new <- big_mac_new %>%
  mutate(country = case_when(
    country == 'United Arab Emirates' ~ 'UAE',
    TRUE ~ country  
  ))
```

add in export & import data

```{r}
export <- read_csv("data/export.csv")
```

```{r}
head(export)
```

rename export column and filter important columns for joining

```{r}
export_data <- rename(export, country = `Partner Name`, year = Year) %>%
  select(country, 
         year,
         export_usd = `Export (US$ Thousand)`,
         import_usd = `Import (US$ Thousand)`)

```

rename some of the country and location name

```{r}
export_data <- export_data %>%
  mutate(country = case_when(
    country == "Russian Federation" ~ "Russia",
    country == "United Kingdom" ~ "Britain",
    country == "Hong Kong, China" ~ "Hong Kong",
    country == "Korea, Rep." ~ "South Korea",
    country == 'Egypt, Arab Rep.' ~ 'Egypt',
    country == 'Slovak Republic' ~ 'Slovakia',
    country == 'United Arab Emirates' ~ 'UAE',
    TRUE ~ country  
  ))
```

join the big mac data with export data

```{r}
joined_data <- left_join(big_mac_new, export_data, by = c("country", "year"))
```

add in gdp data

```{r}
gdp <- read_csv("data/gdp.csv")
```

```{r}
head(gdp)
```

reformat to long format

```{r}
gdp_long_format <- gdp %>%
  pivot_longer(
    cols = -c(`Series Name`, `Series Code`, `Country Name`, `Country Code`),  
    names_to = "year",
    names_pattern = "^\\d{4} \\[YR(\\d{4})\\]",  
    values_to = "GDP"
  ) %>%
  select(country = `Country Name`, year, GDP)

gdp_long_format$year <- as.integer(gdp_long_format$year)
```

convert missing data

```{r}
gdp_long_format <- gdp_long_format %>%
  mutate(GDP = na_if(GDP, ".."))
```

rename columns in GDP

```{r}
gdp_long_format <- gdp_long_format %>%
  mutate(country = case_when(
    country == "Russian Federation" ~ "Russia",
    country == "United Kingdom" ~ "Britain",
    country == "Czechia" ~ "Czech Republic",
    country == "Korea, Rep." ~ "South Korea",
    country == "Egypt, Arab Rep." ~ "Egypt",
    country == 'Hong Kong SAR, China' ~ 'Hong Kong',
    country == 'Slovak Republic' ~ 'Slovakia',
    country == 'United Arab Emirates' ~ 'UAE',
    country == 'Viet Nam' ~ 'Vietnam',
    country == 'Turkiye' ~ 'Turkey',
    country == 'Venezuela, RB' ~ 'Venezuela',
    TRUE ~ country  
  ))
```

join big mac data with gdp

```{r}
joined_data <- left_join(joined_data, gdp_long_format, by = c("country", "year"))
```

import GPD per Capita data

```{r}
gdp_capita <- read_csv("data/gdp_capita.csv")
```

```{r}
head(gdp_capita)
```

reformat to long format

```{r}
gdp_capita_long_format <- gdp_capita %>%
  pivot_longer(
    cols = -c(`Series Name`, `Series Code`, `Country Name`, `Country Code`),  
    names_to = "year",
    names_pattern = "^\\d{4} \\[YR(\\d{4})\\]",  
    values_to = "gdp_per_capita"
  ) %>%
  select(country = `Country Name`, year, gdp_per_capita)

gdp_capita_long_format$year <- as.integer(gdp_capita_long_format$year)
```

convert missing data

```{r}
gdp_capita_long_format <- gdp_capita_long_format %>%
  mutate(gdp_per_capita = na_if(gdp_per_capita, ".."))
```

rename columns in inflation

```{r}
gdp_capita_long_format <- gdp_capita_long_format %>%
  mutate(country = case_when(
    country == "Russian Federation" ~ "Russia",
    country == "United Kingdom" ~ "Britain",
    country == "Czechia" ~ "Czech Republic",
    country == "Korea, Rep." ~ "South Korea",
    country == "Egypt, Arab Rep." ~ "Egypt",
    country == 'Hong Kong SAR, China' ~ 'Hong Kong',
    country == 'Slovak Republic' ~ 'Slovakia',
    country == 'United Arab Emirates' ~ 'UAE',
    country == 'Viet Nam' ~ 'Vietnam',
    country == 'Turkiye' ~ 'Turkey',
    country == 'Venezuela, RB' ~ 'Venezuela',
    TRUE ~ country  
  ))
```

join big mac data with gdp_per_capita

```{r}
joined_data <- left_join(joined_data, gdp_capita_long_format, by = c("country", "year"))
```

import GPD per employed data

```{r}
gdp_employed <- read_csv("data/gdp_employed.csv")
```

```{r}
head(gdp_employed)
```

reformat to long format

```{r}
gdp_employed_long_format <- gdp_employed %>%
  pivot_longer(
    cols = -c(`Series Name`, `Series Code`, `Country Name`, `Country Code`),  
    names_to = "year",
    names_pattern = "^\\d{4} \\[YR(\\d{4})\\]",  
    values_to = "gdp_per_employed"
  ) %>%
  select(country = `Country Name`, year, gdp_per_employed)

gdp_employed_long_format$year <- as.integer(gdp_employed_long_format$year)
```

convert missing data

```{r}
gdp_employed_long_format <- gdp_employed_long_format %>%
  mutate(gdp_per_employed = na_if(gdp_per_employed, ".."))
```

rename columns in inflation

```{r}
gdp_employed_long_format <- gdp_employed_long_format %>%
  mutate(country = case_when(
    country == "Russian Federation" ~ "Russia",
    country == "United Kingdom" ~ "Britain",
    country == "Czechia" ~ "Czech Republic",
    country == "Korea, Rep." ~ "South Korea",
    country == "Egypt, Arab Rep." ~ "Egypt",
    country == 'Hong Kong SAR, China' ~ 'Hong Kong',
    country == 'Slovak Republic' ~ 'Slovakia',
    country == 'United Arab Emirates' ~ 'UAE',
    country == 'Viet Nam' ~ 'Vietnam',
    country == 'Turkiye' ~ 'Turkey',
    country == 'Venezuela, RB' ~ 'Venezuela',
    TRUE ~ country  
  ))
```

join big mac data with gdp_per_employed

```{r}
joined_data <- left_join(joined_data, gdp_employed_long_format, by = c("country", "year"))
```

import inflation data

```{r}
inflation <- read_csv("data/inflation.csv")
```

```{r}
head(inflation)
```

reformat to long format

```{r}
inflation_long_format <- inflation %>%
  pivot_longer(
    cols = -c(`Series Name`, `Series Code`, `Country Name`, `Country Code`),  
    names_to = "year",
    names_pattern = "^\\d{4} \\[YR(\\d{4})\\]",  
    values_to = "inflation"
  ) %>%
  select(country = `Country Name`, year, inflation)

inflation_long_format$year <- as.integer(inflation_long_format$year)
```

convert missing data

```{r}
inflation_long_format <- inflation_long_format %>%
  mutate(inflation = na_if(inflation, ".."))
```

rename columns in inflation

```{r}
inflation_long_format <- inflation_long_format %>%
  mutate(country = case_when(
    country == "Russian Federation" ~ "Russia",
    country == "United Kingdom" ~ "Britain",
    country == "Czechia" ~ "Czech Republic",
    country == "Korea, Rep." ~ "South Korea",
    country == "Egypt, Arab Rep." ~ "Egypt",
    country == 'Hong Kong SAR, China' ~ 'Hong Kong',
    country == 'Slovak Republic' ~ 'Slovakia',
    country == 'United Arab Emirates' ~ 'UAE',
    country == 'Viet Nam' ~ 'Vietnam',
    country == 'Turkiye' ~ 'Turkey',
    country == 'Venezuela, RB' ~ 'Venezuela',
    TRUE ~ country  
  ))
```

join big mac data with inflation

```{r}
joined_data <- left_join(joined_data, inflation_long_format, by = c("country", "year"))
```

drop Taiwan, and Euroarea during to missing data, and rename the new dataframe

```{r}
big_mac_combined <- joined_data %>%
  filter(country != "Taiwan", country != "Euro area")
```

take a look at the dataframe

```{r}
head(big_mac_combined)
```

change column datatype

```{r}
big_mac_combined <- big_mac_combined %>%
  mutate(
    GDP = as.numeric(GDP),
    inflation = as.numeric(inflation),
    gdp_per_capita = as.numeric(gdp_per_capita),
    gdp_per_employed = as.numeric(gdp_per_employed)
  )
```

```{r}
head(big_mac_combined)
```

```{r}
summary(big_mac_combined)
```

```{r}
# Summarize data to find the range of years available for each country
year_summary <- big_mac_combined %>%
  group_by(country) %>%
  summarize(StartYear = min(year), EndYear = max(year)) %>%
  ungroup()

# Print the summary
print(year_summary)

```

```{r}
library(dplyr)
library(tidyr)

# Your previous code to summarize StartYear and EndYear by country
year_summary <- big_mac_combined %>%
  group_by(country) %>%
  summarize(StartYear = min(year), EndYear = max(year)) %>%
  ungroup()

# Group by StartYear and list countries along with their EndYear
grouped_summary <- year_summary %>%
  group_by(StartYear) %>%
  summarize(Countries = paste(country, "(EndYear:", EndYear, ")", sep = "", collapse = "; "),
            .groups = 'drop') %>%
  ungroup()

# Print the grouped summary
print(grouped_summary)

```

```{r}

filtered_big_mac_data <- big_mac_combined %>%
  filter(!(year %in% c(2022, 2023)))

# View the first few rows of the filtered dataframe to confirm
head(filtered_big_mac_data)

```

Checking the missing data and highlighting the countries within the gdp_per_employed and inflation columns

```{r}
missing_values_summary <- filtered_big_mac_data %>%
  filter(is.na(gdp_per_employed) | is.na(inflation)) %>% # Adjust 'price' to the column you're interested in
  group_by(country, year) %>%
  summarise(MissingCount = n(), .groups = 'drop') %>%
  arrange(country, year)

# Display the summary
print(missing_values_summary)

```

Impute the the inflation data for Argentina from *\[World Data Info Link\]*(https://www.worlddata.info/america/argentina/inflation-rates.php)

```{r}
library(readxl)
arg_inflation_data <- read_excel("data/ARG_inflation_Data.xlsx")


arg_inflation_data_relevant <- arg_inflation_data %>%
  select(year, inflation)


filtered_big_mac_data_imputed <- filtered_big_mac_data %>%
  
  mutate(inflation_arg = ifelse(country == "Argentina", arg_inflation_data$inflation[match(year, arg_inflation_data$year)], NA)) %>%
  mutate(inflation = ifelse(is.na(inflation) & country == "Argentina", inflation_arg, inflation)) %>%
  select(-inflation_arg)

print(filtered_big_mac_data_imputed)
```

Will now, remove the data from Venezuela as it has both missing datas from gdp and inflation

```{r}
cleaned_big_mac_data <- filtered_big_mac_data_imputed %>%
  filter(country != "Venezuela")
```

```{r}
library(dplyr)
library(tidyr)

# Assuming 'cleaned_big_mac_data' is already loaded into your R session

# Convert year to numeric to ensure proper filtering
cleaned_big_mac_data$year <- as.numeric(as.character(cleaned_big_mac_data$year))

# Filter for years 2002 to 2021
data_2002_2021 <- cleaned_big_mac_data %>%
  filter(year >= 2002 & year <= 2021)

# Drop rows with any NA values in any column
data_2002_2021_complete <- na.omit(data_2002_2021)

# Identify countries with data for each year from 2002 to 2021
countries_with_complete_data <- data_2002_2021_complete %>%
  group_by(country) %>%
  filter(n_distinct(year) == (2021 - 2002 + 1)) %>%
  ungroup()

countries_with_complete_data <- countries_with_complete_data %>%
  rename(
    bmi_localprice = local_price,
    bmi_usdprice = usd_price
  )
countries_with_complete_data <- countries_with_complete_data %>%
  mutate(country = ifelse(country == "Britain", "United Kingdom", country),
         country = ifelse(country == "Czech Republic", "Czech Rep.", country),
         country = ifelse(country == "South Korea", "Korea", country),
         country = ifelse(country == "Switzerland", "	
Switzerland", country))

# View the first few rows to confirm
head(countries_with_complete_data)



```

```{r}
# Save cleaned_big_mac_data dataframe to a CSV file
write.csv(countries_with_complete_data, file = "data/countries_with_complete_data.csv")
```

# 3. Building a Choropleth map for analysis of metrics

## 3.1 Loading the required R packages.

The function `World` is a spatial object from the `sf` package. It is a special column that contains geometry for each row; called 8polygons\*.

```{r}
pacman::p_load(sf, tmap, tidyverse, tmaptools)
```

Calling out the object `World`.

```{r}
data("World")

```

Subsequently, removing the columns selected below which are non-consequential to the project's scope.

```{r}
wmpb_World <- World %>% 
  select(-HPI, -inequality, -footprint, -life_exp, -well_being, -gdp_cap_est)
wmpb_World
```

## 3.2 Importing Geo-Relational Attributes into the `shp` file

Next, we will import *cleaned_big_mac_data* file into RStudio and save the file into an R dataframe called *Big_mac index*.

The task will be performed by using *read_csv()* function of **readr** package as shown in the code chunk below.

```{r}
BMIdata <- read_csv("data/countries_with_complete_data.csv")
```

```{r}
wmpb_World_BMI <- wmpb_World %>% left_join(BMIdata,
                          by = c("name" = "country"))
```

Merged_data_cleaned will exclude countries with all NA values for the specified columns and filtering the selected year needed.

```{r}

library(dplyr)

wmpb_World_BMI_2020 <- wmpb_World_BMI %>%
  filter(year == 2020) %>% 
  group_by(name) %>%
  filter(
    any(!is.na(currency_code)) & 
    any(!is.na(bmi_localprice)) & 
    any(!is.na(bmi_usdprice)) & 
    any(!is.na(export_usd)) & 
    any(!is.na(import_usd)) & 
    any(!is.na(GDP)) & 
    any(!is.na(gdp_per_capita)) & 
    any(!is.na(gdp_per_employed)) & 
    any(!is.na(inflation)) & 
    any(!is.na(year))
  ) %>%
  ungroup()

```

```{r}
write_rds(wmpb_World_BMI_2020, "data/wmpb_BMI_cleaned_2020.rds")
```

```{r}
tmap_mode("view")

tm <- tm_shape(wmpb_World_BMI_2020) +
  tm_polygons("inflation", id = "name", popup.vars = c("Big Mac Index" = "bmi_usdprice", 
                                                       "Inflation" = "inflation", 
                                                       "Population Density" = "pop_est_dens", 
                                                       "GDP per Employed" = "gdp_per_employed",
                                                       "Import(USD)" = "import_usd",
                                                       "Export(USD)" = "export_usd"),
            popup.format = list(pop_est_dens = list(digits = 1), gdp_per_employed = list(digits = 0), inflation = list(digits = 1)
  )) +
  tm_layout()

tm
#qtm(wmpb_World_BMI_2020, 
   #fill = "usd_price")
```

```{r}
map_imports <- tm_shape(wmpb_World_BMI_2020) +
  tm_polygons("import_usd", id = "name") + 
  tm_layout(frame = FALSE)

map_exports <- tm_shape(wmpb_World_BMI_2020) +
  tm_polygons("export_usd", id = "name") +
  tm_layout(frame = FALSE)

# Arrange the maps using tm_arrange
tmap_arrange(map_imports, map_exports, ncol=2)
```

```{r}
library(shiny)
library(leaflet)

# Assuming 'wmpb_World_BMI_2020' is already loaded and contains 'iso_a3' for country codes,
# 'import_usd', and 'export_usd' for import and export values.

ui <- fluidPage(
  fluidRow(
    column(6, leafletOutput("wmpb_World_BMI_2020")),
    column(2, leafletOutput("map_imports"), style = "height: 300px;", offset = 1),
    column(2, leafletOutput("map_exports"), style = "height: 300px;", offest = 1))
  )


server <- function(input, output, session) {

  # Reactive value to store the selected country code
  selected_country_code <- reactiveVal()
  
  output$wmpb_World_BMI_2020 <- renderLeaflet({
    leaflet(wmpb_World_BMI_2020) %>%
      addTiles() %>%
      addPolygons(
        fillColor = ~colorQuantile(palette = "Greens", domain = wmpb_World_BMI_2020$inflation)(inflation),
        color = "#BDBDC3",
        fillOpacity = 0.7,
        weight = 1,
        popup = ~paste(name, "<br>Inflation: ", inflation),
        layerId = ~iso_a3
      )
  })

  output$map_imports <- renderLeaflet({
    leaflet(wmpb_World_BMI_2020) %>%
      addTiles() %>%
      addPolygons(
        fillColor = ~colorQuantile(palette = "Blues", domain = wmpb_World_BMI_2020$import_usd)(import_usd),
        color = "#BDBDC3",
        fillOpacity = 0.7,
        weight = 1,
        popup = ~paste(name, "<br>Import (USD): ", import_usd),
        layerId = ~iso_a3
      )
  })

  output$map_exports <- renderLeaflet({
    leaflet(wmpb_World_BMI_2020) %>%
      addTiles() %>%
      addPolygons(
        fillColor = ~colorQuantile(palette = "Reds", domain = wmpb_World_BMI_2020$export_usd)(export_usd),
        color = "#BDBDC3",
        fillOpacity = 0.7,
        weight = 1,
        popup = ~paste(name, "<br>Export (USD): ", export_usd),
        layerId = ~iso_a3
      )
  })

  observe({
    click <- input$wmpb_World_BMI_2020_click
    if (!is.null(click)) {
      selected_country_code(click$id)
    }
  })
  
  observe({
    click <- input$map_imports_click
    if (!is.null(click)) {
      selected_country_code(click$id)
    }
  })

  observe({
    click <- input$map_exports_click
    if (!is.null(click)) {
      selected_country_code(click$id)
    }
  })

  observe({
    code <- selected_country_code()
    if (!is.null(code)) {
      leafletProxy("map_imports") %>%
        clearShapes() %>%
        addPolygons(
          fillColor = ~colorQuantile(palette = "Blues", domain = wmpb_World_BMI_2020$import_usd)(import_usd),
          color = ~ifelse(iso_a3 == code, "yellow", "#BDBDC3"),
          fillOpacity = 0.7,
          weight = 1,
          popup = ~paste(name, "<br>Import (USD): ", import_usd),
          layerId = ~iso_a3
        )
      
      leafletProxy("map_exports") %>%
        clearShapes() %>%
        addPolygons(
          fillColor = ~colorQuantile(palette = "Reds", domain = wmpb_World_BMI_2020$export_usd)(export_usd),
          color = ~ifelse(iso_a3 == code, "yellow", "#BDBDC3"),
          fillOpacity = 0.7,
          weight = 1,
          popup = ~paste(name, "<br>Export (USD): ", export_usd),
          layerId = ~iso_a3
        )
    }
  })
}

shinyApp(ui, server)


```
