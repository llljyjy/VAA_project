---
title: "Data Preparation & Cleaning"
author: "Jiayi, Firdaus & Victoria"
date: "02/22/24"
date-modified: "last-modified"
execute:
  eval: true
  echo: true 
  warning: false
date-format: long
---

# 1. Launching R Packages and Data Import

## Import Package

The following code snippet imports the necessary packages used for our analysis:

-   **Tidyverse:** An aggregation of R packages designed for data science.

-   **Dplyr and tidyr:** Part of the tidyverse, these packages are instrumental in data manipulation and tidying, respectively.

-   **Readxl:** Facilitates the import of Excel files.

```{r}
pacman::p_load(tidyverse, readxl, dplyr, tidyr) 
```

## Import Big Mac Data

The code below imports the Big Mac dataset, which serves as the primary data source for this analysis. The dataset is in CSV format and was downloaded from [the Economist's GitHub](https://github.com/TheEconomist/big-mac-data/tree/master/output-data) page. Prior to import, some less relevant columns were removed for clarity.

```{r}
big_mac <- read_csv("data/big_mac.csv")
```

The dataset comprises 9 columns, encompassing 1,386 entries across 29 countries and regions from the year 2000 onward. Notably, for some countries, there are multiple records per year. The date column is initially in character format and requires conversion to a date format for accurate analysis.

The code chunk below converts the date column to a date format

```{r}
big_mac$date <- dmy(big_mac$date)
```

select only useful col

```{r}
big_mac <- big_mac %>%
  select(date, currency_code, name, local_price, dollar_price)
```

The code below provides a preview of the Big Mac dataset

```{r}
head(big_mac)
```

## Import Complementary Data Set

complementary dataset are imported to add in additional indicators

-   import export data

-   GDP

-   GDP per Capita

-   inflation

-   GDP per Employed

-   Unemployment Rate

-   Human Development Index (HDI)

-   Population

Other then import export data is from [Kaggle](https://www.kaggle.com/datasets/muhammadtalhaawan/world-export-and-import-dataset), all other indicators are from the [World Bank](https://databank.worldbank.org/reports.aspx?source=2&series=NY.GDP.MKTP.KD.ZG&country=)

The code chunk below imports the import export data

```{r}
export <- read_csv("data/export.csv")
```

```{r}
head(export)
```

the table is in long format

the code chunk below imports

```{r}
gdp <- read_csv("data/gdp.csv")
gdp_capita <- read_csv("data/gdp_capita.csv")
gdp_employed <- read_csv("data/gdp_employed.csv")
inflation <- read_csv("data/inflation.csv")
unemployment <- read_csv("data/unemployment_rate.csv")
```

the code chunk below display an overview of the dataframe

```{r}
head(gdp)
```

these indicators are in short format and it is necessary to convert it to long format first so that it can join with the big mac table

the function below converts the input into a long table format

to be updated

hdi is in long format

```{r}
hdi <- read_csv("data/human-development-index.csv")
population <- read_csv("data/population.csv")
```

# 2. Data Wrangling and Merging

## BIG MAC DAT

convert date to year

```{r}
big_mac$year <- year(big_mac$date)
big_mac
```

some of country name is not consistent, rename

```{r}
big_mac <- big_mac %>%
  mutate(name = case_when(
    name == 'United Arab Emirates' ~ 'UAE',
    TRUE ~ name 
  ))
```

check number of records per year

```{r}
entries_per_year_country <- big_mac %>%
  group_by(year, name) %>%
  summarize(count = n())
```

As most countries only contains 1 record each year, the earliest record for each year will be kept for easier manipulation

```{r}
first_records <- big_mac %>%
  group_by(year, name) %>%
  slice(1)
```

rename some variables

```{r}
big_mac_new <- first_records %>%
  select(country = name, 
         year, 
         currency_code, 
         bmi_localprice = local_price, 
         bmi_usd_price = dollar_price
    
  )
```

### local price %

```{r}
big_mac_new <- big_mac_new %>%
  group_by(country) %>%  
  arrange(country, currency_code, year) %>%  
  mutate(bmi_change = (bmi_localprice / lag(bmi_localprice) - 1) * 100) %>%
  ungroup()  
head(big_mac_new)
```

## other data

### export

```{r}
head(export)
```

rename export column and filter important columns for joining

```{r}
export_data <- rename(export, country = `Partner Name`, year = Year) %>%
  select(country, 
         year,
         export_usd = `Export (US$ Thousand)`,
         import_usd = `Import (US$ Thousand)`)

```

understand net trading \$

```{r}
export_data <- export_data %>%
  mutate(net_export = export_usd - import_usd)

head(export_data)
```

rename some of the country and location name

```{r}
export_data <- export_data %>%
  mutate(country = case_when(
    country == "Russian Federation" ~ "Russia",
    country == "United Kingdom" ~ "Britain",
    country == "Hong Kong, China" ~ "Hong Kong",
    country == "Korea, Rep." ~ "South Korea",
    country == 'Egypt, Arab Rep.' ~ 'Egypt',
    country == 'Slovak Republic' ~ 'Slovakia',
    country == 'United Arab Emirates' ~ 'UAE',
    TRUE ~ country  
  ))
```

join the big mac data with export data

```{r}
joined_data <- left_join(big_mac_new, export_data, by = c("country", "year"))
```

### GDP data

reformat to long format

```{r}
gdp_long_format <- gdp %>%
  pivot_longer(
    cols = -c(`Series Name`, `Series Code`, `Country Name`, `Country Code`),  
    names_to = "year",
    names_pattern = "^\\d{4} \\[YR(\\d{4})\\]",  
    values_to = "GDP"
  ) %>%
  select(country = `Country Name`, year, GDP)

gdp_long_format$year <- as.integer(gdp_long_format$year)
```

convert missing data

```{r}
gdp_long_format <- gdp_long_format %>%
  mutate(GDP = na_if(GDP, ".."))
```

rename columns in GDP

```{r}
gdp_long_format <- gdp_long_format %>%
  mutate(country = case_when(
    country == "Russian Federation" ~ "Russia",
    country == "United Kingdom" ~ "Britain",
    country == "Czechia" ~ "Czech Republic",
    country == "Korea, Rep." ~ "South Korea",
    country == "Egypt, Arab Rep." ~ "Egypt",
    country == 'Hong Kong SAR, China' ~ 'Hong Kong',
    country == 'Slovak Republic' ~ 'Slovakia',
    country == 'United Arab Emirates' ~ 'UAE',
    country == 'Viet Nam' ~ 'Vietnam',
    country == 'Turkiye' ~ 'Turkey',
    country == 'Venezuela, RB' ~ 'Venezuela',
    TRUE ~ country  
  ))
```

join big mac data with gdp

```{r}
joined_data <- left_join(joined_data, gdp_long_format, by = c("country", "year"))
```

### GDP per Capita

reformat to long format

```{r}
gdp_capita_long_format <- gdp_capita %>%
  pivot_longer(
    cols = -c(`Series Name`, `Series Code`, `Country Name`, `Country Code`),  
    names_to = "year",
    names_pattern = "^\\d{4} \\[YR(\\d{4})\\]",  
    values_to = "gdp_per_capita"
  ) %>%
  select(country = `Country Name`, year, gdp_per_capita)

gdp_capita_long_format$year <- as.integer(gdp_capita_long_format$year)
```

convert missing data

```{r}
gdp_capita_long_format <- gdp_capita_long_format %>%
  mutate(gdp_per_capita = na_if(gdp_per_capita, ".."))
```

rename columns

```{r}
gdp_capita_long_format <- gdp_capita_long_format %>%
  mutate(country = case_when(
    country == "Russian Federation" ~ "Russia",
    country == "United Kingdom" ~ "Britain",
    country == "Czechia" ~ "Czech Republic",
    country == "Korea, Rep." ~ "South Korea",
    country == "Egypt, Arab Rep." ~ "Egypt",
    country == 'Hong Kong SAR, China' ~ 'Hong Kong',
    country == 'Slovak Republic' ~ 'Slovakia',
    country == 'United Arab Emirates' ~ 'UAE',
    country == 'Viet Nam' ~ 'Vietnam',
    country == 'Turkiye' ~ 'Turkey',
    country == 'Venezuela, RB' ~ 'Venezuela',
    TRUE ~ country  
  ))
```

join big mac data with gdp_per_capita

```{r}
joined_data <- left_join(joined_data, gdp_capita_long_format, by = c("country", "year"))
```

### inflation

reformat to long format

```{r}
inflation_long_format <- inflation %>%
  pivot_longer(
    cols = -c(`Series Name`, `Series Code`, `Country Name`, `Country Code`),  
    names_to = "year",
    names_pattern = "^\\d{4} \\[YR(\\d{4})\\]",  
    values_to = "inflation"
  ) %>%
  select(country = `Country Name`, year, inflation)

inflation_long_format$year <- as.integer(inflation_long_format$year)
```

convert missing data

```{r}
inflation_long_format <- inflation_long_format %>%
  mutate(inflation = na_if(inflation, ".."))
```

rename columns in inflation

```{r}
inflation_long_format <- inflation_long_format %>%
  mutate(country = case_when(
    country == "Russian Federation" ~ "Russia",
    country == "United Kingdom" ~ "Britain",
    country == "Czechia" ~ "Czech Republic",
    country == "Korea, Rep." ~ "South Korea",
    country == "Egypt, Arab Rep." ~ "Egypt",
    country == 'Hong Kong SAR, China' ~ 'Hong Kong',
    country == 'Slovak Republic' ~ 'Slovakia',
    country == 'United Arab Emirates' ~ 'UAE',
    country == 'Viet Nam' ~ 'Vietnam',
    country == 'Turkiye' ~ 'Turkey',
    country == 'Venezuela, RB' ~ 'Venezuela',
    TRUE ~ country  
  ))
```

join big mac data with inflation

```{r}
joined_data <- left_join(joined_data, inflation_long_format, by = c("country", "year"))
```

### unemployment

reformat to long format

```{r}
unemployment_long_format <- unemployment %>%
  pivot_longer(
    cols = -c(`Indicator Name`, `Indicator Code`, `Country Name`, `Country Code`),  
    names_to = "year",
    values_to = "unemployment"
  ) %>%
  select(country = `Country Name`, year, unemployment)

unemployment_long_format$year <- as.integer(unemployment_long_format$year)
```

rename columns in unemployment

```{r}
unemployment_long_format <- unemployment_long_format %>%
  mutate(country = case_when(
    country == "Russian Federation" ~ "Russia",
    country == "United Kingdom" ~ "Britain",
    country == "Czechia" ~ "Czech Republic",
    country == "Korea, Rep." ~ "South Korea",
    country == "Egypt, Arab Rep." ~ "Egypt",
    country == 'Hong Kong SAR, China' ~ 'Hong Kong',
    country == 'Slovak Republic' ~ 'Slovakia',
    country == 'United Arab Emirates' ~ 'UAE',
    country == 'Viet Nam' ~ 'Vietnam',
    country == 'Turkiye' ~ 'Turkey',
    country == 'Venezuela, RB' ~ 'Venezuela',
    TRUE ~ country  
  ))
```

join big mac data with unemployment

```{r}
joined_data <- left_join(joined_data, unemployment_long_format, by = c("country", "year"))
```

take a look at the dataframe

```{r}
head(joined_data)
```

### hdi

select columns

```{r}
head(hdi)
```

```{r}
hdi <- hdi %>%
  mutate(country = case_when(
    country == "Russian Federation" ~ "Russia",
    country == "United Kingdom" ~ "Britain",
    country == "Czechia" ~ "Czech Republic",
    country == "Korea, Rep." ~ "South Korea",
    country == "Egypt, Arab Rep." ~ "Egypt",
    country == 'Hong Kong SAR, China' ~ 'Hong Kong',
    country == 'Slovak Republic' ~ 'Slovakia',
    country == 'United Arab Emirates' ~ 'UAE',
    country == 'Viet Nam' ~ 'Vietnam',
    country == 'Turkiye' ~ 'Turkey',
    country == 'Venezuela, RB' ~ 'Venezuela',
    TRUE ~ country  
  ))
```

```{r}
joined_data2 <- left_join(joined_data, hdi, by = c("country", "year"))
```

```{r}
joined_data2
```

### population

rename columns

```{r}
population <- population %>%
  mutate(country = case_when(
    country == "Russian Federation" ~ "Russia",
    country == "United Kingdom" ~ "Britain",
    country == "Czechia" ~ "Czech Republic",
    country == "Korea, Rep." ~ "South Korea",
    country == "Egypt, Arab Rep." ~ "Egypt",
    country == 'Hong Kong SAR, China' ~ 'Hong Kong',
    country == 'Slovak Republic' ~ 'Slovakia',
    country == 'United Arab Emirates' ~ 'UAE',
    country == 'Viet Nam' ~ 'Vietnam',
    country == 'Turkiye' ~ 'Turkey',
    country == 'Venezuela, RB' ~ 'Venezuela',
    TRUE ~ country  
  ))
```

```{r}
head(population)
```

join with big mac

```{r}
joined_data2 <- left_join(joined_data2, population, by = c("country", "year"))
```

## check for missing data

drop tai wan change name

```{r}
big_mac_combined <- joined_data2 %>%
  filter(country != "Taiwan", country != "Euro area")
```

change column datatype

```{r}
big_mac_combined <- big_mac_combined %>%
  mutate(
    GDP = as.numeric(GDP),
    inflation = as.numeric(inflation),
    gdp_per_capita = as.numeric(gdp_per_capita)
  )
```

```{r}
head(big_mac_combined)
```

```{r}
summary(big_mac_combined)
```

```{r}
# Summarize data to find the range of years available for each country
year_summary <- big_mac_combined %>%
  group_by(country) %>%
  summarize(StartYear = min(year), EndYear = max(year)) %>%
  ungroup()

# Print the summary
print(year_summary)

```

```{r}
# Your previous code to summarize StartYear and EndYear by country
year_summary <- big_mac_combined %>%
  group_by(country) %>%
  summarize(StartYear = min(year), EndYear = max(year)) %>%
  ungroup()

# Group by StartYear and list countries along with their EndYear
grouped_summary <- year_summary %>%
  group_by(StartYear) %>%
  summarize(Countries = paste(country, "(EndYear:", EndYear, ")", sep = "", collapse = "; "),
            .groups = 'drop') %>%
  ungroup()

# Print the grouped summary
print(grouped_summary)

```

```{r}

filtered_big_mac_data <- big_mac_combined %>%
  filter(!(year %in% c(2022, 2023)))

# View the first few rows of the filtered dataframe to confirm
head(filtered_big_mac_data)

```

Checking the missing data and highlighting the countries within the gdp_per_employed and inflation columns

```{r}
missing_values_summary <- filtered_big_mac_data %>%
  filter(is.na(inflation)) %>% # Adjust 'price' to the column you're interested in
  group_by(country, year) %>%
  summarise(MissingCount = n(), .groups = 'drop') %>%
  arrange(country, year)

# Display the summary
print(missing_values_summary)

```

Impute the the inflation data for Argentina from *\[World Data Info Link\]*(https://www.worlddata.info/america/argentina/inflation-rates.php)

```{r}
library(readxl)
arg_inflation_data <- read_excel("data/ARG_inflation_Data.xlsx")


arg_inflation_data_relevant <- arg_inflation_data %>%
  select(year, inflation)


filtered_big_mac_data_imputed <- filtered_big_mac_data %>%
  
  mutate(inflation_arg = ifelse(country == "Argentina", arg_inflation_data$inflation[match(year, arg_inflation_data$year)], NA)) %>%
  mutate(inflation = ifelse(is.na(inflation) & country == "Argentina", inflation_arg, inflation)) %>%
  select(-inflation_arg)

print(filtered_big_mac_data_imputed)
```

Will now, remove the data from Venezuela as it has both missing datas from gdp and inflation

```{r}
cleaned_big_mac_data <- filtered_big_mac_data_imputed %>%
  filter(country != "Venezuela")
```

```{r}
head(cleaned_big_mac_data)
```

```{r}


# Convert year to numeric to ensure proper filtering
cleaned_big_mac_data$year <- as.numeric(as.character(cleaned_big_mac_data$year))

# Filter for years 2002 to 2021
data_2002_2021 <- cleaned_big_mac_data %>%
  filter(year >= 2002 & year <= 2021)

# Identify countries with data for each year from 2002 to 2021
countries_with_complete_data <- data_2002_2021 %>%
  group_by(country) %>%
  filter(n_distinct(year) == (2021 - 2002 + 1)) %>%
  ungroup()

countries_with_complete_data <- countries_with_complete_data %>%
  mutate(country = ifelse(country == "Britain", "United Kingdom", country),
         country = ifelse(country == "Czech Republic", "Czech Rep.", country),
         country = ifelse(country == "South Korea", "Korea", country),
         country = ifelse(country == "Switzerland", "Switzerland", country))

# View the first few rows to confirm
head(countries_with_complete_data)



```

## combine with country

```{r}
country_all <- data.frame(country = unique(countries_with_complete_data$country))
```

map continent

```{r}
continent_mapping <- data.frame(
  country = c("Argentina", "Australia", "Brazil", "United Kingdom", "Canada", "Chile", "China", "Czech Rep.", "Denmark", "Hong Kong", "Hungary", "Indonesia", "Japan", "Malaysia", "Mexico", "New Zealand", "Peru", "Philippines", "Poland", "Russia", "Singapore", "South Africa", "Korea", "Sweden", "Switzerland", "Thailand", "Turkey", "United States"),
  continent = c("South America", "Oceania", "South America", "Europe", "North America", "South America", "Asia", "Europe", "Europe", "Asia", "Europe", "Asia", "Asia", "Asia", "North America", "Oceania", "South America", "Asia", "Europe", "Europe", "Asia", "Africa", "Asia", "Europe", "Europe", "Asia", "Asia", "North America")
)

# Merge the continent mapping with your original DataFrame 'df'
country_all <- merge(country_all, continent_mapping, by = "country", all.x = TRUE)
```

map g7, g20, eu

```{r}
g7_countries <- c("Canada", "France", "Germany", "Italy", "United Kingdom", "United States", "Japan")

g20_countries <- c("Argentina", "Australia", "Brazil", "Canada", "China", "France", "Germany", "India", "Indonesia", "Italy", "Japan", "Mexico", "Russia", "Saudi Arabia", "South Africa", "South Korea", "Turkey", "United Kingdom", "United States", "European Union")

eu_countries <- c("Austria", "Belgium", "Bulgaria", "Croatia", "Cyprus", "Czech Rep.", "Denmark", "Estonia", "Finland", "France", "Germany", "Greece", "Hungary", "Ireland", "Italy", "Latvia", "Lithuania", "Luxembourg", "Malta", "Netherlands", "Poland", "Portugal", "Romania", "Slovakia", "Slovenia", "Spain", "Sweden")

brics_countries <- c("Brazil", "Russia", "India", "China", "South Africa","Egypt","Ethiopia","Iran","United Arab Emirates")
```

```{r}
country_all <- country_all %>%
  mutate(
    g7 = country %in% g7_countries,
    g20 = country %in% g20_countries,
    eu = country %in% eu_countries,
    brics = country %in% brics_countries)
  
```

take a look at the countries

```{r}
head(country_all)
```

```{r}
# Save cleaned_big_mac_data dataframe to a CSV file
write.csv(countries_with_complete_data, file = "data/bmi_data.csv")
write.csv(country_all, file = "data/country_data.csv")

```
